#!/bin/sh

. /lib/functions.sh
. /lib/functions/network.sh
. /lib/mwan3/mwan3.sh
. /lib/mwan3/common.sh

trap_with_arg()
{
	func="$1" ; shift
	pid="$1" ; shift
	for sig ; do
		trap "$func $sig $pid" "$sig"
	done
}

func_trap()
{
	kill -${1} ${2} 2>/dev/null
}


mwan3_rtmon_route_handle()
{
	config_load mwan3
	local section action route_line family tbl device line route_line_exp tid
	route_line=${1##"Deleted "}
	route_family=$2

	if [ "$route_line" == "$1" ]; then
		action="replace"
		route_line_exp='s/expires \([0-9]\+\)sec/expires \1/;s/error [0-9]\+//; s/default\(.*\) \(from\|src\) [^ ]*/default\1/'
		$IPS -! add mwan3_connected_${route_family##ip} ${route_line%% *}
	else
		action="del"
		route_line_exp='s/expires [0-9]\+sec//;s/error [0-9]\+//; s/default from [^ ]*/default/'
		mwan3_set_connected_${route_family}
	fi

	if [ "$route_family" = "ipv4" ]; then
		IP="$IP4"
	elif [ "$route_family" = "ipv6" ] && [ $NO_IPV6 -eq 0 ]; then
		IP="$IP6"
		route_line=$(echo "$route_line" | sed "$route_line_exp")
	else
		LOG warn "route update called with invalid family - $route_family"
		return
	fi

	# don't try to add routes when link has gone down
	if [ -z "${route_line##linkdown*}" ]; then
		LOG debug "not adding route due to linkdown - skipping $route_line"
		return
	fi

	handle_route() {

		tbl=$($IP route list table $tid 2>/dev/null)

	        if [ "$(cat /var/run/mwan3track/$section/STATUS)" != "online" ]; then
			LOG debug "interface $section is offline - skipping $route_line";
			return
		fi

		# check that action needs to be performed. May not need to take action if we
		# got a delete event, but table was already flushed

		if [ $action = "del" ] && [ -n "${tbl##*$route_line*}" ]; then
			LOG debug "skipping already deleted route table $tid - skipping $route_line"
			return
		fi

		network_get_device device "$section"
		LOG debug "adjusting route $device: $IP route $action table $tid $route_line"
		$IP route "$action" table $tid $route_line ||
			LOG warn "failed: $IP route $action table $tid $route_line"
	}
	handle_route_cb(){
		let tid++
		config_get family "$section" family ipv4
		[ "$family" != "$route_family" ] && return
		handle_route
	}

	mwan3_update_dev_to_table
	mwan3_route_line_dev "tid" "$route_line" "$route_family"

	if [ -n "$tid" ]; then
		handle_route
	elif [ -n "${route_line##default*}" ] && [ -n "${route_line##fe80::/64*}" ]; then
		config_foreach handle_route_cb interface
	fi
}

main()
{
	local IP family

	config_load mwan3
	family=$1
	[ -z $family ] && family=ipv4
	if [ "$family" = "ipv6" ]; then
		if [ $NO_IPV6 -ne 0 ]; then
			LOG warn "mwan3rtmon started for ipv6, but ipv6 not enabled on system"
			exit 1
		fi
		IP="$IP6"
	else
		IP="$IP4"
	fi
	mwan3_init
	mwan3_lock "mwan3rtmon" "start"
	sh -c "echo \$\$; exec $IP monitor route" | {
		read monitor_pid
		trap_with_arg func_trap "$monitor_pid" SIGINT SIGTERM SIGKILL
		while read line; do
			[ -z "${line##*table*}" ] && continue
			LOG debug "handling route update $family $line"
			mwan3_lock "service" "mwan3rtmon"
			mwan3_rtmon_route_handle "$line" "$family"
			mwan3_unlock "service" "mwan3rtmon"
		done
	} &
	child=$!
	kill -SIGSTOP $child
	trap_with_arg func_trap "$child" SIGINT SIGTERM SIGKILL
	mwan3_set_connected_${family}
	mwan3_add_all_routes ${family}
	mwan3_unlock "mwan3rtmon" "start"
	kill -SIGCONT $child
	wait $!
}
main "$@"
